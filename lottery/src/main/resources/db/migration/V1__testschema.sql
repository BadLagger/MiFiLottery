-- V1__testschema.sql

-- Создаем таблицу LotteryType
CREATE TABLE IF NOT EXISTS LotteryType (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description TEXT NOT NULL,
    ticket_price DECIMAL(8, 2) NOT NULL CHECK(ticket_price > 0),
    min_ticket INTEGER NOT NULL CHECK(min_ticket >= 0),
    price_pool_percentage DOUBLE PRECISION NOT NULL CHECK(price_pool_percentage BETWEEN 0 AND 1)
);

-- Для H2 тип ENUM реализуют как символьное поле с check constraint
CREATE TABLE IF NOT EXISTS Draw (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    lottery_type_id BIGINT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    duration INTEGER NOT NULL,
    status VARCHAR(20) CHECK (status IN ('PLANNED', 'ACTIVE', 'COMPLETED', 'CANCELLED')),
    FOREIGN KEY(lottery_type_id) REFERENCES LotteryType(id)
);

-- Таблица для результатов Тиража. Для БД H2 используем тип JSON, а для Postgres нужно будет использовать JSONB
CREATE TABLE IF NOT EXISTS DrawResult (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    draw_id BIGINT NOT NULL,
    winning_combination JSON NOT NULL,
    winning_tickets JSON,
    result_time TIMESTAMP NOT NULL,
    prize_pool BIGINT NOT NULL,
    FOREIGN KEY(draw_id) REFERENCES Draw(id)
);

-- Начальные данные
INSERT INTO LotteryType (description, ticket_price, min_ticket, price_pool_percentage) VALUES
('auto', 100.0, 5, 0.2);

INSERT INTO Draw(lottery_type_id, name, start_time, duration, status) VALUES
(1, 'Lottery1', TIMESTAMPADD(SQL_TSI_HOUR, 2, CURRENT_TIMESTAMP), 5, 'PLANNED'), -- добавляем 2 часа
(1, 'Lottery2', TIMESTAMPADD(SQL_TSI_HOUR, 10, CURRENT_TIMESTAMP), 7, 'PLANNED'), -- добавляем 10 часов
(1, 'Lottery3', TIMESTAMPADD(SQL_TSI_HOUR, 1, CURRENT_TIMESTAMP), 2, 'ACTIVE'), -- добавляем 1 час
(1, 'Lottery4', TIMESTAMPADD(SQL_TSI_HOUR, -3, CURRENT_TIMESTAMP), 3, 'COMPLETED'); -- вычитаем 3 часа

INSERT INTO DrawResult(draw_id, winning_combination, result_time, prize_pool) VALUES
(4, '[1,2,3,4,5,6]', CURRENT_TIMESTAMP, 1000000);